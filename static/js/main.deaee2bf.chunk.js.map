{"version":3,"sources":["components/MachinesMap/MachinesMap.jsx","api/socket.js","api/rest.js","redux/slices/machines.js","redux/slices/notes.js","redux/store.js","components/Header/index.jsx","hooks/useIntervalUpdate.js","components/EventsList/EventListItem.jsx","components/EventsList/EventsList.jsx","components/EventsList/index.jsx","pages/Events/index.jsx","components/Status/index.jsx","components/MachinesList/MachineListItem.jsx","components/MachinesList/MachinesList.jsx","components/MachinesList/index.jsx","components/AddNote/AddNote.jsx","components/AddNote/index.jsx","components/MachineDetails/TimestampList.jsx","components/MachineDetails/MachineDetails.jsx","components/MachineDetails/index.jsx","components/MachinesMap/index.jsx","pages/Machines/index.jsx","App.jsx","index.jsx","utils/ruler.svg","utils/microscope.svg","utils/map-marker.svg","utils/mapIcon.js"],"names":["ChangeView","center","zoom","map","useMap","setView","getZoom","disabledMapProps","dragging","touchZoom","doubleClickZoom","scrollWheelZoom","boxZoom","keyboard","tap","MachinesMap","machines","mapContainerProps","disabled","mapBounds","machine","longitude","latitude","history","useHistory","zoomSnap","bounds","length","attribution","maxZoom","maxNativeZoom","url","icon","getIconByType","machine_type","position","eventHandlers","click","push","id","interactive","style","fontSize","name","subscribers","subscribeTo","type","callback","concat","callSubscribers","args","forEach","subscriber","socket","Socket","connect","channel","join","receive","onError","on","restInstance","axios","create","baseURL","getMachines","a","get","response","data","Error","getMachineDetails","machinesAdapter","createEntityAdapter","sortComparer","machine1","machine2","localeCompare","eventsAdatper","selectId","event","timestamp","machine_id","status","event1","event2","compareDesc","parseISO","initialState","getInitialState","events","isLoading","errors","addNamesToMachines","index","toString","padStart","Math","log10","loadMachines","createAsyncThunk","arg","getState","loadMachineDetails","machineDetails","machinesSlice","createSlice","reducers","socketError","state","addEvent","payload","addOne","updateOne","changes","extraReducers","pending","action","fulfilled","upsertMany","rejected","error","message","upsertOne","selectAllEvents","getSelectors","selectAll","selectAllMachines","selectMachineById","selectById","selectEventsByMachineId","createSelector","memoize","filter","actions","notesAdapter","note1","note2","notesSlice","addNote","reducer","prepare","note","uuidv4","Date","toISOString","selectAllNotes","notes","selectNotesByMachineId","rootReducer","combineReducers","machinesReducer","notesReducer","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","configureStore","persistor","persistStore","dispatch","Container","styled","display","gap","alignItems","paddingLeft","borderBottom","StyledLink","Link","textDecoration","Header","to","useIntervalUpdate","ms","useReducer","x","forceUpdate","useEffect","handle","setTimeout","clearTimeout","EventListItem","machineName","timeDistance","formatDistanceToNow","addSuffix","StyledListItem","ListItemText","Title","variant","Timestamp","ListItem","color","Typography","fontWeight","Status","theme","palette","grey","EventsList","List","EventsListContainer","useSelector","slice","modifiedEvents","Events","statusColors","Text","capitalize","StyledNavLink","NavLink","borderRight","borderRightColor","MachineListItem","ListItemIcon","transform","ref","node","firstChild","appendChild","createIcon","MachinesList","MachinesListContainer","AddNote","handleAdd","useState","isOpen","setOpen","content","setContent","closeDialog","Button","onClick","Dialog","open","onClose","fullWidth","DialogTitle","DialogContent","DialogContentText","TextField","value","onChange","ev","target","label","autoFocus","multiline","rows","margin","DialogActions","AddNoteContainer","useDispatch","trim","TimestampList","getTimestamp","getContent","emptyMsg","paddingTop","item","format","whiteSpace","padding","Box","main","aside","Paper","minWidth","Aside","top","right","flexDirection","MachineDetails","last_maintenance","floor","uptime","formatDistanceToNowStrict","numberOfErrors","latestEvents","differenceInDays","now","marginTop","height","width","boundsOptions","zoomControl","MachineDetailsContainer","React","lazy","MachinesMapContainer","fallback","gridTemplateColumns","overflow","Machines","path","useRouteMatch","render","match","params","flex","App","ReactDOM","StrictMode","CssBaseline","document","getElementById","defaultIconOption","iconSize","tooltipAnchor","options","L","rulerIcon","iconUrl","rulerUrl","microscopeIcon","microscopeUrl","defaultIcon","mapMarkerUrl","typeIconMap"],"mappings":"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","file":"static/js/main.deaee2bf.chunk.js","sourcesContent":["import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { MapContainer, TileLayer, Marker, Tooltip, useMap } from 'react-leaflet'\nimport Typography from '@material-ui/core/Typography';\nimport { getIconByType } from '../../utils/mapIcon'\nimport 'leaflet/dist/leaflet.css';\n\nconst MachinesMap = ({ machines, mapContainerProps = {}, disabled }) => {\n  const mapBounds = machines.map(machine => ([\n    machine.longitude,\n    machine.latitude\n  ]))\n  const history = useHistory()\n\n  return (\n    <MapContainer\n      zoomSnap={0.25}\n      bounds={mapBounds}\n      {...(disabled && disabledMapProps)}\n      {...mapContainerProps}\n    >\n      {machines.length === 1\n        && <ChangeView center={mapBounds[0]} zoom={18} />}\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        maxZoom={22}\n        maxNativeZoom={19}\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {\n        machines.map(machine => (\n          <Marker\n            icon={getIconByType(machine.machine_type)}\n            key={machine.id}\n            position={[machine.longitude, machine.latitude]}\n            eventHandlers={{\n              click: () => history.push(`/machines/${machine.id}`)\n            }}\n            interactive={!disabled}\n          >\n            <Tooltip>\n              <Typography style={{ fontSize: \"1.4rem\" }}>{machine.name}</Typography>\n            </Tooltip>\n          </Marker>\n        ))\n      }\n    </MapContainer>\n  )\n}\n\nconst ChangeView = ({ center, zoom }) => {\n  const map = useMap()\n  map.setView(center, zoom ?? map.getZoom())\n  return null\n}\n\nconst disabledMapProps = {\n  dragging: false,\n  touchZoom: false,\n  doubleClickZoom: false,\n  scrollWheelZoom: false,\n  boxZoom: false,\n  keyboard: false,\n  tap: false,\n}\n\nexport default MachinesMap\n","import { Socket } from \"phoenix\";\n\nconst subscribers = {}\n\n/** @param { \"ERROR\" | \"MESSAGE\" } type */\nexport const subscribeTo = (type, callback) => {\n  subscribers[type] = (subscribers[type] ?? []).concat(callback)\n}\nconst callSubscribers = (type) => (...args) => {\n  subscribers[type].forEach(subscriber => subscriber(...args))\n}\n\nconst socket = new Socket(\"wss://machinestream.herokuapp.com/api/v1/events/websocket?vsn=2.0.0\")\nsocket.connect()\n\nconst channel = socket.channel(\"events\")\nchannel.join()\n  .receive(\"error\", callSubscribers(\"ERROR\"))\n  .receive(\"timeout\", callSubscribers(\"ERROR\"))\nchannel.onError(callSubscribers(\"ERROR\"))\nchannel.on(\"new\", callSubscribers(\"MESSAGE\"))\n","import axios from \"axios\"\n\nconst restInstance = axios.create({\n  baseURL: \"https://machinestream.herokuapp.com/api/v1/\"\n})\n\nexport const getMachines = async () => {\n  const response = await restInstance.get(\"/machines\")\n  const machines = response.data?.data\n  if (!machines) throw new Error(\"No machines received\")\n  return machines\n}\n\nexport const getMachineDetails = async (id) => {\n  const response = await restInstance.get(`/machines/${id}`)\n  const machine = response.data?.data\n  if (!machine) throw new Error(\"No machine details received\")\n  return machine\n}\n","import { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { getMachineDetails, getMachines } from '../../api/rest';\nimport memoize from \"lodash/memoize\";\nimport { parseISO, compareDesc } from \"date-fns\";\n\nconst machinesAdapter = createEntityAdapter({\n  sortComparer: (machine1, machine2) => machine1?.name?.localeCompare(machine2?.name)\n})\nconst getEventId = (event) => `${event.timestamp},${event.machine_id},${event.status}`\nconst eventsAdatper = createEntityAdapter({\n  selectId: getEventId,\n  sortComparer: (event1, event2) => compareDesc(parseISO(event1.timestamp), parseISO(event2.timestamp))\n})\n\nconst initialState = {\n  machines: machinesAdapter.getInitialState(),\n  events: machinesAdapter.getInitialState(),\n  isLoading: false,\n  errors: []\n}\n\nconst addNamesToMachines = (machines) => machines.map((machine, index) => ({\n  name: `Machine ${(machines.length - index).toString().padStart(Math.log10(machines.length) + 1, \"0\")}`,\n  ...machine\n}))\nexport const loadMachines = createAsyncThunk(\"machines/load\", async (arg, { getState }) => {\n  const machines = await getMachines()\n  return addNamesToMachines(machines)\n})\nexport const loadMachineDetails = createAsyncThunk(\"machines/details\", async (id) => {\n  const machineDetails = await getMachineDetails(id)\n  machineDetails.events = machineDetails.events.map(event => ({\n    machine_id: machineDetails.id,\n    ...event\n  }))\n  return machineDetails\n})\n\nconst machinesSlice = createSlice({\n  name: \"machines\",\n  initialState,\n  reducers: {\n    socketError: (state) => {\n      state.errors.push(\"Websocket error\")\n    },\n    addEvent: (state, { payload: event }) => {\n      eventsAdatper.addOne(state.events, event)\n      machinesAdapter.updateOne(state.machines, {\n        id: event.machine_id,\n        changes: { status: event.status }\n      })\n    }\n  },\n  extraReducers: {\n    [loadMachines.pending]: (state, action) => {\n      state.isLoading = true\n    },\n    [loadMachines.fulfilled]: (state, { payload: machines }) => {\n      state.isLoading = false\n      machinesAdapter.upsertMany(state.machines, machines)\n    },\n    [loadMachines.rejected]: (state, { error }) => {\n      state.isLoading = false\n      state.errors.push(error.message)\n    },\n    [loadMachineDetails.fulfilled]: (state, { payload: machineDetails }) => {\n      eventsAdatper.upsertMany(state.events, machineDetails.events)\n      delete machineDetails.events\n      machinesAdapter.upsertOne(state.machines, machineDetails)\n    }\n  }\n})\n\nexport const {\n  selectAll: selectAllEvents\n} = eventsAdatper.getSelectors(state => state.machines.events)\nexport const {\n  selectAll: selectAllMachines,\n  selectById: selectMachineById\n} = machinesAdapter.getSelectors(state => state.machines.machines)\nexport const selectEventsByMachineId = createSelector(\n  selectAllEvents,\n  events => memoize(\n    machine_id => events.filter(event => event.machine_id === machine_id)\n  )\n)\n\nexport const {\n  socketError,\n  addEvent\n} = machinesSlice.actions\nexport default machinesSlice.reducer\n","import { createEntityAdapter, createSlice, createSelector } from '@reduxjs/toolkit'\nimport { v4 as uuidv4 } from \"uuid\"\nimport memoize from 'lodash/memoize'\nimport { parseISO, compareDesc } from \"date-fns\";\n\nconst notesAdapter = createEntityAdapter({\n  sortComparer: (note1, note2) => compareDesc(parseISO(note1.timestamp), parseISO(note2.timestamp))\n})\n\nconst initialState = notesAdapter.getInitialState()\n\nconst notesSlice = createSlice({\n  name: \"notes\",\n  initialState,\n  reducers: {\n    addNote: {\n      reducer: notesAdapter.addOne,\n      prepare: note => ({\n        payload: {\n          id: uuidv4(),\n          timestamp: new Date().toISOString(),\n          ...note\n        }\n      })\n    }\n  }\n})\n\nexport const {\n  selectAll: selectAllNotes\n} = notesAdapter.getSelectors(state => state.notes)\n\nexport const selectNotesByMachineId = createSelector(\n  selectAllNotes,\n  notes => memoize(\n    machine_id => notes.filter(notes => notes.machine_id === machine_id)\n  )\n)\nexport const {\n  addNote\n} = notesSlice.actions\nexport default notesSlice.reducer\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\"\nimport { persistStore, persistReducer } from \"redux-persist\"\nimport storage from \"redux-persist/lib/storage\"\nimport { subscribeTo } from \"../api/socket\"\nimport machinesReducer, { socketError, addEvent } from \"./slices/machines\"\nimport notesReducer from \"./slices/notes\"\n\nconst rootReducer = combineReducers({\n    machines: machinesReducer,\n    notes: notesReducer,\n})\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    whitelist: [\"notes\"]\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = configureStore({\n    reducer: persistedReducer\n})\nexport const persistor = persistStore(store)\n\nsubscribeTo(\"ERROR\", () => store.dispatch(socketError()))\nsubscribeTo(\"MESSAGE\", message => store.dispatch(addEvent(message)))\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { styled } from '@material-ui/core/styles'\n\nconst Header = () => {\n  return (\n    <Container>\n      <StyledLink to=\"/machines\">Machines</StyledLink>\n      <StyledLink to=\"/events\">Events</StyledLink>\n    </Container>\n  )\n}\n\nconst Container = styled(\"nav\")({\n  display: \"flex\",\n  gap: 20,\n  alignItems: \"center\",\n  paddingLeft: 20,\n  borderBottom: \"2px solid\"\n})\n\nconst StyledLink = styled(Link)({\n  textDecoration: \"none\",\n  fontSize: \"1.6em\"\n})\n\nexport default Header\n","import { useEffect, useReducer } from \"react\"\n\nconst useIntervalUpdate = (ms) => {\n  const [, forceUpdate] = useReducer(x => x + 1, 0)\n  useEffect(() => {\n    const handle = setTimeout(forceUpdate, ms)\n    return () => clearTimeout(handle)\n  })\n}\n\nexport default useIntervalUpdate","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatDistanceToNow, parseISO } from 'date-fns';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport { styled } from '@material-ui/core/styles';\n\nexport const EventListItem = ({ event }) => {\n  const { machine_id, machineName, timestamp, status } = event\n  const timeDistance = formatDistanceToNow(parseISO(timestamp), { addSuffix: true })\n\n  return (\n    <StyledListItem>\n      <ListItemText>\n        <StyledLink to={`/machines/${machine_id}`}>\n          <Title variant=\"h4\">{machineName}</Title>\n        </StyledLink>\n        <Status>{status}</Status>\n        <Timestamp>{timeDistance}</Timestamp>\n      </ListItemText>\n    </StyledListItem>\n  )\n}\n\nconst StyledListItem = styled(ListItem)({\n  \"--base-size\": \"1rem\",\n  \"&:first-child\": {\n    \"--base-size\": \"2rem\",\n  },\n})\n\nconst StyledLink = styled(Link)({\n  textDecoration: \"none\",\n  color: \"inherit\"\n})\n\nconst Title = styled(Typography)({\n  fontWeight: \"bold\",\n  fontSize: \"calc(2 * var(--base-size))\"\n})\n\nconst Status = styled(Typography)({\n  fontSize: \"calc(1.2 * var(--base-size))\"\n})\n\nconst Timestamp = styled(Typography)(({ theme }) => ({\n  color: theme.palette.grey[600],\n  fontSize: \"calc(0.8 * var(--base-size))\"\n}))","import React from 'react'\nimport List from '@material-ui/core/List'\nimport Typography from '@material-ui/core/Typography';\nimport useIntervalUpdate from '../../hooks/useIntervalUpdate'\nimport { EventListItem } from './EventListItem'\n\nconst updateIntervalInMs = 30 * 1000\n\nconst EventsList = ({ events }) => {\n  useIntervalUpdate(updateIntervalInMs)\n\n  return events.length\n    ? <List>{\n      events.map((event, index) =>\n        <EventListItem\n          key={event.id || index}\n          event={event}\n        />)\n    }</List>\n    : <Typography>No events to display</Typography>\n}\n\nexport default EventsList\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectAllEvents, selectMachineById } from '../../redux/slices/machines'\nimport EventsList from './EventsList'\n\nconst numberOfEvents = 4\n\nconst EventsListContainer = () => {\n  const events = useSelector(selectAllEvents)\n    .slice(0, numberOfEvents)\n\n  const modifiedEvents = useSelector(state => events.map(event => ({\n    machineName: selectMachineById(state, event.machine_id).name,\n    ...event\n  })))\n\n  return <EventsList events={modifiedEvents} />\n}\n\nexport default EventsListContainer\n","import React from 'react'\nimport EventsList from '../../components/EventsList'\n\nconst Events = () => {\n  return <EventsList />\n}\n\nexport default Events\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport capitalize from \"lodash/capitalize\";\nimport { styled } from '@material-ui/core/styles';\n\nconst Status = ({ status }) => {\n  return (\n    <Typography>\n      Status:{\" \"}\n      <Text status={status}>\n        {capitalize(status)}\n      </Text>\n    </Typography>\n  )\n}\n\nconst statusColors = {\n  \"running\": \"green\",\n  \"finished\": \"grey\",\n  \"errored\": \"red\",\n}\nconst Text = styled(\"b\")({\n  fontSize: \"1.2em\",\n  color: ({ status }) => statusColors[status] ?? \"inherit\"\n})\n\nexport default Status\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport Typography from '@material-ui/core/Typography'\nimport { getIconByType } from '../../utils/mapIcon'\nimport { styled } from '@material-ui/core/styles'\nimport Status from '../Status'\n\nconst MachineListItem = ({ id, name, status, machine_type }) => (\n  <StyledNavLink\n    to={`/machines/${id}`}\n  >\n    <ListItem>\n      <ListItemText>\n        <Typography variant=\"h4\">{name}</Typography>\n        <Status status={status} />\n      </ListItemText>\n      <ListItemIcon\n        style={{ position: \"relative\", transform: \"translateX(50%)\" }}\n        ref={node => {\n          if (!node || node.firstChild)\n            return\n          node.appendChild(getIconByType(machine_type).createIcon())\n        }} />\n    </ListItem>\n  </StyledNavLink>\n)\n\nconst StyledNavLink = styled(NavLink)({\n  borderRight: \"4px solid\",\n  borderRightColor: \"transparent\",\n  textDecoration: \"none\",\n  display: \"block\",\n  color: \"inherit\",\n  \"&.active\": { borderRightColor: \"green\" }\n})\n\nexport default MachineListItem\n","import React from 'react'\nimport MachineListItem from './MachineListItem'\nimport List from '@material-ui/core/List'\n\nconst MachinesList = ({ machines }) => {\n  return (\n    <List>{\n      machines.map(machine =>\n        <MachineListItem key={machine.id} {...machine} />\n      )\n    }</List>\n  )\n}\n\nexport default MachinesList\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectAllMachines } from '../../redux/slices/machines'\nimport MachinesList from \"./MachinesList\"\n\nconst MachinesListContainer = () => {\n  const machines = useSelector(selectAllMachines)\n\n  return <MachinesList machines={machines} />\n}\n\nexport default MachinesListContainer\n","import React, { useState } from 'react'\nimport Button from \"@material-ui/core/Button\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport DialogContentText from \"@material-ui/core/DialogContentText\"\nimport TextField from \"@material-ui/core/TextField\"\n\nconst AddNote = ({ handleAdd }) => {\n  const [isOpen, setOpen] = useState(false)\n  const [content, setContent] = useState(\"\")\n  const openDialog = () => setOpen(true)\n  const closeDialog = () => {\n    setOpen(false)\n    setContent(\"\")\n  }\n  const handleSubmit = () => {\n    closeDialog()\n    handleAdd(content)\n  }\n\n  return (\n    <div>\n      <Button onClick={openDialog} variant=\"contained\" color=\"primary\" style={{ fontSize: \"1.4em\" }}>\n        Add Note\n        </Button>\n      <Dialog open={isOpen} onClose={closeDialog} fullWidth>\n        <DialogTitle id=\"form-dialog-title\">Add a new note to this machine</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            This note gets stored locally in your browser.\n          </DialogContentText>\n          <TextField\n            value={content}\n            onChange={ev => setContent(ev.target.value)}\n            label=\"Note content\"\n            autoFocus\n            multiline\n            rows={3}\n            margin=\"dense\"\n            fullWidth\n            variant=\"outlined\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={closeDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\n\nexport default AddNote\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addNote } from '../../redux/slices/notes'\nimport AddNote from './AddNote'\n\nconst AddNoteContainer = ({ machine_id }) => {\n  const dispatch = useDispatch()\n\n  const handleAdd = (content) =>\n    dispatch(addNote({\n      machine_id,\n      content: content.trim()\n    }))\n\n  return <AddNote handleAdd={handleAdd} />\n}\n\nexport default AddNoteContainer\n","import { format } from 'date-fns'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Typography from '@material-ui/core/Typography'\n\nconst TimestampList = ({ data, getTimestamp, getContent, emptyMsg }) => (\n  data?.length\n    ? (\n      <List style={{ paddingTop: 0 }}>{\n        data.map((item, index) =>\n          <ListItem key={index}>\n            <ListItemText>\n              <Typography style={{ color: \"darkgrey\" }}>\n                {\"[\" + format(getTimestamp(item), \"yyyy-MM-dd\") + \"]\"}\n              </Typography>\n              <Typography style={{ fontSize: \"1.2em\", whiteSpace: \"pre\" }}>\n                {getContent(item)}\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        )\n      }</List>\n    ) : (\n      <Typography style={{ padding: 8 }}>{emptyMsg || \"No data\"}</Typography>\n    )\n)\n\nexport default TimestampList","import React from 'react'\nimport { parseISO, formatDistanceToNowStrict, differenceInDays } from 'date-fns'\nimport AddNote from '../AddNote'\nimport MachinesMap from '../MachinesMap/MachinesMap'\nimport Typography from '@material-ui/core/Typography'\nimport Paper from '@material-ui/core/Paper'\nimport { styled } from '@material-ui/core/styles';\nimport capitalize from \"lodash/capitalize\";\nimport Status from '../Status'\nimport TimestampList from './TimestampList'\n\nconst MachineDetails = ({ machine, notes, events }) => {\n  const { name, status, machine_type, last_maintenance, floor } = machine\n  const uptime = formatDistanceToNowStrict(parseISO(last_maintenance))\n  const numberOfErrors = events.filter(event => event.status === \"errored\").length\n  const eventLimitInDays = 30\n  const latestEvents = events.filter(event =>\n    eventLimitInDays > differenceInDays(Date.now(), parseISO(event.timestamp)))\n\n  return (\n    <Container>\n      <Typography variant=\"h3\" style={{ fontWeight: \"bold\" }}>{name}</Typography>\n      <Status status={status}></Status>\n      <Typography>Type: {capitalize(machine_type)}</Typography>\n      <Typography>Floor: {floor}</Typography>\n\n      <Typography variant=\"h4\" style={{ marginTop: 20 }}>\n        Details\n      </Typography>\n      <Box main={uptime} aside=\"Uptime\" />\n      <Box main={numberOfErrors} aside=\"Errors\" />\n\n      <Typography variant=\"h4\" style={{ marginTop: 20 }}>\n        Notes\n      </Typography>\n      <TimestampList\n        data={notes}\n        getTimestamp={note => parseISO(note.timestamp)}\n        getContent={note => note.content}\n        emptyMsg=\"No notes stored...\"\n      />\n\n      <Typography variant=\"h4\" style={{ marginTop: 20 }}>\n        Events <span style={{ fontSize: \"0.6em\" }}>from the last {eventLimitInDays} days</span>\n      </Typography>\n      <TimestampList\n        data={latestEvents}\n        getTimestamp={event => parseISO(event.timestamp)}\n        getContent={event => event.status}\n        emptyMsg=\"No events recorded...\"\n      />\n\n      <Aside>\n        <MachinesMap\n          machines={[machine]}\n          mapContainerProps={{\n            style: { height: 250, width: 250 },\n            boundsOptions: { maxZoom: 19 },\n            zoomControl: false,\n          }}\n          disabled\n        />\n        <AddNote machine_id={machine.id} />\n      </Aside>\n    </Container>\n  )\n}\n\nconst Box = ({ main, aside }) => (\n  <Paper style={{ display: \"inline-block\", padding: 16, margin: 10, minWidth: 100 }}>\n    <Typography style={{ fontWeight: \"bold\", fontSize: 32 }}>{main}</Typography>\n    <Typography>{aside}</Typography>\n  </Paper>\n)\n\nconst Container = styled(\"div\")({\n  padding: \"30px 20px\",\n  position: \"relative\"\n})\n\nconst Aside = styled(\"div\")({\n  position: \"absolute\",\n  top: 0,\n  right: 0,\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: 20,\n  alignItems: \"center\"\n})\n\nexport default MachineDetails\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Typography from '@material-ui/core/Typography'\nimport { loadMachineDetails, selectEventsByMachineId, selectMachineById } from '../../redux/slices/machines'\nimport { selectNotesByMachineId } from '../../redux/slices/notes'\nimport MachineDetails from \"./MachineDetails\"\n\nconst MachineDetailsContainer = ({ id }) => {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(loadMachineDetails(id))\n  }, [dispatch, id])\n\n  const machine = useSelector(state => selectMachineById(state, id))\n  const notes = useSelector(state => selectNotesByMachineId(state)(id))\n  const events = useSelector(state => selectEventsByMachineId(state)(id))\n\n  return machine\n    ? <MachineDetails machine={machine} notes={notes} events={events} />\n    : <Typography>Loading machine details</Typography>\n}\n\nexport default MachineDetailsContainer\n","import React, { Suspense } from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectAllMachines } from \"../../redux/slices/machines\";\n\nconst MachinesMap = React.lazy(() => import('./MachinesMap'))\n\nconst MachinesMapContainer = () => {\n  const machines = useSelector(selectAllMachines)\n\n  if (!machines?.length)\n    return \"Nothing to show\"\n\n  return (\n    <Suspense fallback=\"Loading map\">\n      <MachinesMap\n        machines={machines}\n        mapContainerProps={{\n          boundsOptions: { padding: [100, 100], maxZoom: 20 }\n        }}\n      />\n    </Suspense>\n  )\n}\n\nexport default MachinesMapContainer\n","import React from 'react'\nimport { Route, Switch, useRouteMatch } from 'react-router-dom'\nimport MachinesList from '../../components/MachinesList'\nimport MachineDetails from '../../components/MachineDetails'\nimport MachinesMap from '../../components/MachinesMap'\nimport { styled } from '@material-ui/core/styles'\n\nconst Machines = () => {\n  const { path } = useRouteMatch()\n\n  return (\n    <Container>\n      <MachinesList />\n      <Switch>\n        <Route path={`${path}/:id`} render={({ match }) => (\n          <MachineDetails id={match.params.id} />\n        )} />\n        <Route>\n          <MachinesMap />\n        </Route>\n      </Switch>\n    </Container>\n  )\n}\n\nconst Container = styled(\"div\")({\n  display: \"grid\",\n  gridTemplateColumns: \"300px 1fr\",\n  \"& > *\": {\n    overflow: \"hidden auto\"\n  }\n})\n\nexport default Machines\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport { styled } from '@material-ui/core';\nimport Header from './components/Header';\nimport Events from './pages/Events';\nimport Machines from \"./pages/Machines\";\nimport { loadMachines } from './redux/slices/machines';\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(loadMachines())\n  }, [dispatch])\n\n  return (\n    <Container>\n      <Header />\n      <Switch>\n        <Route path=\"/machines\"><Machines /></Route>\n        <Route path=\"/events\"><Events /></Route>\n        <Route><Redirect to=\"/machines\" /></Route>\n      </Switch>\n    </Container>\n  );\n}\n\nconst Container = styled(\"div\")({\n  width: \"100vw\",\n  height: \"100vh\",\n  overflow: \"hidden\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  \"& > :first-child\": {\n    flex: \"0 0 50px\"\n  },\n  \"& > :last-child\": {\n    flex: \"1 1 100px\",\n    overflow: \"hidden\"\n  }\n})\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Provider } from \"react-redux\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { store, persistor } from \"./redux/store\"\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <Router>\n          <CssBaseline />\n          <App />\n        </Router>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","export default __webpack_public_path__ + \"static/media/ruler.4f91741f.svg\";","export default __webpack_public_path__ + \"static/media/microscope.82c978f5.svg\";","export default __webpack_public_path__ + \"static/media/map-marker.d9fe5579.svg\";","import L from 'leaflet'\nimport rulerUrl from \"./ruler.svg\"\nimport microscopeUrl from \"./microscope.svg\"\nimport mapMarkerUrl from \"./map-marker.svg\"\n\nconst defaultIconOption = {\n  iconSize: [32, 32],\n  tooltipAnchor: [16, 0]\n}\nconst createIcon = (options) => L.icon({\n  ...defaultIconOption,\n  ...options\n})\n\nconst rulerIcon = createIcon({ iconUrl: rulerUrl })\nconst microscopeIcon = createIcon({ iconUrl: microscopeUrl })\nconst defaultIcon = createIcon({ iconUrl: mapMarkerUrl })\n\nconst typeIconMap = {\n  \"microscope\": microscopeIcon,\n  \"measurement\": rulerIcon,\n}\n\nexport const getIconByType = (type) =>\n  typeIconMap[type] ?? defaultIcon\n"],"sourceRoot":""}